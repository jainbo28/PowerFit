const fs = require('fs');
const { app, requireAllLocals, requireAllRoutes, requireAllMiddlewares } = require('./server.js');
const { view } = require('./view.js');
const { getAll : allLocals } = require('./locals.js');

/// Subdomain
// Allow just for one subdomain
app.use(function( req, res, next){
  req.subdomain = req.hostname.split('.')[0];
  next();
  // if( req.hostname.split('.').length > 2 ){
  //     res.json({"message":"Multi subdomain not allowed!"});
  // }
  // else{
  //     req.subdomain = req.hostname.split('.')[0];
  //     next();
  // }
});

/// Set if it is an app
app.use(async( req, res, next )=>{
  // let app_name = ( req.params.param1 ) ?? 'main';
  // if( req.params.param2 ) app_name += `/${req.params.param2}`;
  // if( req.params.param3 ) app_name += `/${req.params.param3}`;
  // if( req.params.param4 ) app_name += `/${req.params.param4}`;

  req.app_config = {};

  /// If the method is get
  if( req.method === 'GET' ) {
    
    req.app_config.app_name = ( req.originalUrl === '/' ) ? 'main' : req.originalUrl.replace('/','');
    /// If the app exists
    if( fs.existsSync( `./frontend/dist/apps/${req.app_config.app_name}/index.ejs` ) ) {
      req.app_config.app_exists = true;
       /// TODO: Make it configurable.
      if( fs.existsSync( `./frontend/dist/apps/${req.app_config.app_name}/config.json` ) ) {
        let c = fs.readFileSync(`./frontend/dist/apps/${req.app_config.app_name}/config.json`, "utf8");
        req.app_config = { ...req.app_config, ...JSON.parse( c ) };
      }else{
        req.app_config.layout = "shared/layouts/default";
        req.app_config.access = "public";
      }
    }else{
      req.app_config.app_exists = false;
      req.app_config.app_name = 'notfound';
      req.app_config.notfound_app = 'notfound'; /// TODO: Make it configurable.
    }
  }
  next();
})
// Set locals
app.use(async ( req, res, next)=>{
  // Add locals modules to the res.locals.
  res.locals = allLocals();
  next();
});

app.use((req, res, next) => {
  const userAgent = req.get('User-Agent');

  if (userAgent && userAgent.includes('Mozilla')) {
    // Assuming 'Mozilla' is present in the User-Agent header for browsers
    req.from_browser = true;
    console.log('Request from a browser');
  } else {
    req.from_browser = false;
    console.log('Request from a non-browser client');
  }

  next();
});


/** Import all middlewares */
requireAllMiddlewares();

/** Import all locals */
requireAllLocals();

/** Import all routes */
requireAllRoutes();

/** All get routes which were not registred with requireAllRoutes functions will be considered as a route for an app. */
  app.get('*', (req, res) => {

    view( res, req.app_config );

      // let app_name = ( req.params.param1 ) ?? 'main';
      // if( req.params.param2 ) app_name += `/${req.params.param2}`;
      // if( req.params.param3 ) app_name += `/${req.params.param3}`;
      // if( req.params.param4 ) app_name += `/${req.params.param4}`;
      
      // /// Get config file
      // let config = {};

      // if( fs.existsSync( `./frontend/dist/apps/${app_name}/config.json` ) ) {
      //   let c = fs.readFileSync(`./frontend/dist/apps/${app_name}/config.json`, "utf8");
      //   config = JSON.parse( c );
      // }
      // else {
      //   config.layout = "shared/layouts/default";
      //   config.access = "public";
      // };
      
      // /// Pass req and res to ejs
      // config.req = req;
      // config.res = res;
      
      // // For notfound app.
      // config.app_exists = true;
      
      // if( fs.existsSync( `./frontend/dist/apps/${app_name}/index.ejs` ) ) {
      //     config.app_name = app_name;
      //     if( config.access !== 'public' && !req.app.locals.user ) {
      //       res.cookie('redirect_to', app_name );
      //       res.redirect('auth/login');
      //     } else if ( req.app.locals.user && ['auth/login', 'auth/registration'].includes( app_name ) ) {
      //       res.redirect('/');
      //     }else{
      //       view( res, config);
      //     }
          
      // }else {
      //   config.app_exists = false;
      //   config.app_name = 'notfound';
      //   config.notfound_app = app_name;
      //   view( res, config);
      // }
    
});





/** Not found page */
app.post('*', ( req, res )=>{
  res.json({"message":"Not found!"});
});



